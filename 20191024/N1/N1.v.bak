module N1(clk, rst,d_vail,data_in,crc);
    input clk, rst, d_vail, [3:0]data_in;
    output reg [15:0] crc;
    wire [15:0]out_crc;
    CRC12 crc12)(.data_in(data_in), .crc(out_crc));

    always@(posedge clk)begin
        if(rst == 0) begin
            out_crc <= 0;
        end else begin
            if(d_vail) crc <= out_crc;
        end

    end

endmodule
// x^{12}+x^{11}+x^{3}+x^{2}+x+1
module CRC12(data_in, crc);
    input [3:0]data_in;
    output reg [15:0] crc;
    integer i;
    reg [15:0] data;
    always(data_in)begin
        data = data_in << 12;
        for(i=0;i<12;i=i+1)begin
            crc = { crc[15:13],
                    crc[15]^crc[12],
                    crc[15]^crc[11],
                    crc[10:4],
                    crc[15]^crc[3],
                    crc[15]^crc[2],
                    crc[15]^crc[1],   
                    crc[15]^crc[0],   
                    data[15] ^ crc[15]};
            data = data<<1;
        end
    end
endmodule