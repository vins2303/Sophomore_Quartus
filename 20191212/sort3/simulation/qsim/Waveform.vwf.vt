// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/12/2019 13:30:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sort3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sort3_vlg_sample_tst(
	clk,
	in_d,
	num1,
	num2,
	num3,
	num4,
	reset,
	sampler_tx
);
input  clk;
input  in_d;
input [7:0] num1;
input [7:0] num2;
input [7:0] num3;
input [7:0] num4;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or in_d or num1 or num2 or num3 or num4 or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sort3_vlg_check_tst (
	o1,
	o2,
	o3,
	o4,
	out,
	sampler_rx
);
input [7:0] o1;
input [7:0] o2;
input [7:0] o3;
input [7:0] o4;
input [7:0] out;
input sampler_rx;

reg [7:0] o1_expected;
reg [7:0] o2_expected;
reg [7:0] o3_expected;
reg [7:0] o4_expected;
reg [7:0] out_expected;

reg [7:0] o1_prev;
reg [7:0] o2_prev;
reg [7:0] o3_prev;
reg [7:0] o4_prev;
reg [7:0] out_prev;

reg [7:0] o1_expected_prev;
reg [7:0] o2_expected_prev;
reg [7:0] o3_expected_prev;
reg [7:0] o4_expected_prev;
reg [7:0] out_expected_prev;

reg [7:0] last_o1_exp;
reg [7:0] last_o2_exp;
reg [7:0] last_o3_exp;
reg [7:0] last_o4_exp;
reg [7:0] last_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	o1_prev = o1;
	o2_prev = o2;
	o3_prev = o3;
	o4_prev = o4;
	out_prev = out;
end

// update expected /o prevs

always @(trigger)
begin
	o1_expected_prev = o1_expected;
	o2_expected_prev = o2_expected;
	o3_expected_prev = o3_expected;
	o4_expected_prev = o4_expected;
	out_expected_prev = out_expected;
end


// expected out[ 7 ]
initial
begin
	out_expected[7] = 1'bX;
end 
// expected out[ 6 ]
initial
begin
	out_expected[6] = 1'bX;
end 
// expected out[ 5 ]
initial
begin
	out_expected[5] = 1'bX;
end 
// expected out[ 4 ]
initial
begin
	out_expected[4] = 1'bX;
end 
// expected out[ 3 ]
initial
begin
	out_expected[3] = 1'bX;
end 
// expected out[ 2 ]
initial
begin
	out_expected[2] = 1'bX;
end 
// expected out[ 1 ]
initial
begin
	out_expected[1] = 1'bX;
end 
// expected out[ 0 ]
initial
begin
	out_expected[0] = 1'bX;
end 
// expected o1[ 7 ]
initial
begin
	o1_expected[7] = 1'bX;
end 
// expected o1[ 6 ]
initial
begin
	o1_expected[6] = 1'bX;
end 
// expected o1[ 5 ]
initial
begin
	o1_expected[5] = 1'bX;
end 
// expected o1[ 4 ]
initial
begin
	o1_expected[4] = 1'bX;
end 
// expected o1[ 3 ]
initial
begin
	o1_expected[3] = 1'bX;
end 
// expected o1[ 2 ]
initial
begin
	o1_expected[2] = 1'bX;
end 
// expected o1[ 1 ]
initial
begin
	o1_expected[1] = 1'bX;
end 
// expected o1[ 0 ]
initial
begin
	o1_expected[0] = 1'bX;
end 
// expected o2[ 7 ]
initial
begin
	o2_expected[7] = 1'bX;
end 
// expected o2[ 6 ]
initial
begin
	o2_expected[6] = 1'bX;
end 
// expected o2[ 5 ]
initial
begin
	o2_expected[5] = 1'bX;
end 
// expected o2[ 4 ]
initial
begin
	o2_expected[4] = 1'bX;
end 
// expected o2[ 3 ]
initial
begin
	o2_expected[3] = 1'bX;
end 
// expected o2[ 2 ]
initial
begin
	o2_expected[2] = 1'bX;
end 
// expected o2[ 1 ]
initial
begin
	o2_expected[1] = 1'bX;
end 
// expected o2[ 0 ]
initial
begin
	o2_expected[0] = 1'bX;
end 
// expected o3[ 7 ]
initial
begin
	o3_expected[7] = 1'bX;
end 
// expected o3[ 6 ]
initial
begin
	o3_expected[6] = 1'bX;
end 
// expected o3[ 5 ]
initial
begin
	o3_expected[5] = 1'bX;
end 
// expected o3[ 4 ]
initial
begin
	o3_expected[4] = 1'bX;
end 
// expected o3[ 3 ]
initial
begin
	o3_expected[3] = 1'bX;
end 
// expected o3[ 2 ]
initial
begin
	o3_expected[2] = 1'bX;
end 
// expected o3[ 1 ]
initial
begin
	o3_expected[1] = 1'bX;
end 
// expected o3[ 0 ]
initial
begin
	o3_expected[0] = 1'bX;
end 
// expected o4[ 7 ]
initial
begin
	o4_expected[7] = 1'bX;
end 
// expected o4[ 6 ]
initial
begin
	o4_expected[6] = 1'bX;
end 
// expected o4[ 5 ]
initial
begin
	o4_expected[5] = 1'bX;
end 
// expected o4[ 4 ]
initial
begin
	o4_expected[4] = 1'bX;
end 
// expected o4[ 3 ]
initial
begin
	o4_expected[3] = 1'bX;
end 
// expected o4[ 2 ]
initial
begin
	o4_expected[2] = 1'bX;
end 
// expected o4[ 1 ]
initial
begin
	o4_expected[1] = 1'bX;
end 
// expected o4[ 0 ]
initial
begin
	o4_expected[0] = 1'bX;
end 
// generate trigger
always @(o1_expected or o1 or o2_expected or o2 or o3_expected or o3 or o4_expected or o4 or out_expected or out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o1 = %b | expected o2 = %b | expected o3 = %b | expected o4 = %b | expected out = %b | ",o1_expected_prev,o2_expected_prev,o3_expected_prev,o4_expected_prev,out_expected_prev);
	$display("| real o1 = %b | real o2 = %b | real o3 = %b | real o4 = %b | real out = %b | ",o1_prev,o2_prev,o3_prev,o4_prev,out_prev);
`endif
	if (
		( o1_expected_prev[0] !== 1'bx ) && ( o1_prev[0] !== o1_expected_prev[0] )
		&& ((o1_expected_prev[0] !== last_o1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o1_expected_prev);
		$display ("     Real value = %b", o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o1_exp[0] = o1_expected_prev[0];
	end
	if (
		( o1_expected_prev[1] !== 1'bx ) && ( o1_prev[1] !== o1_expected_prev[1] )
		&& ((o1_expected_prev[1] !== last_o1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o1_expected_prev);
		$display ("     Real value = %b", o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o1_exp[1] = o1_expected_prev[1];
	end
	if (
		( o1_expected_prev[2] !== 1'bx ) && ( o1_prev[2] !== o1_expected_prev[2] )
		&& ((o1_expected_prev[2] !== last_o1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o1_expected_prev);
		$display ("     Real value = %b", o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o1_exp[2] = o1_expected_prev[2];
	end
	if (
		( o1_expected_prev[3] !== 1'bx ) && ( o1_prev[3] !== o1_expected_prev[3] )
		&& ((o1_expected_prev[3] !== last_o1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o1_expected_prev);
		$display ("     Real value = %b", o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o1_exp[3] = o1_expected_prev[3];
	end
	if (
		( o1_expected_prev[4] !== 1'bx ) && ( o1_prev[4] !== o1_expected_prev[4] )
		&& ((o1_expected_prev[4] !== last_o1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o1_expected_prev);
		$display ("     Real value = %b", o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o1_exp[4] = o1_expected_prev[4];
	end
	if (
		( o1_expected_prev[5] !== 1'bx ) && ( o1_prev[5] !== o1_expected_prev[5] )
		&& ((o1_expected_prev[5] !== last_o1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o1_expected_prev);
		$display ("     Real value = %b", o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o1_exp[5] = o1_expected_prev[5];
	end
	if (
		( o1_expected_prev[6] !== 1'bx ) && ( o1_prev[6] !== o1_expected_prev[6] )
		&& ((o1_expected_prev[6] !== last_o1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o1_expected_prev);
		$display ("     Real value = %b", o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o1_exp[6] = o1_expected_prev[6];
	end
	if (
		( o1_expected_prev[7] !== 1'bx ) && ( o1_prev[7] !== o1_expected_prev[7] )
		&& ((o1_expected_prev[7] !== last_o1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o1_expected_prev);
		$display ("     Real value = %b", o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o1_exp[7] = o1_expected_prev[7];
	end
	if (
		( o2_expected_prev[0] !== 1'bx ) && ( o2_prev[0] !== o2_expected_prev[0] )
		&& ((o2_expected_prev[0] !== last_o2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o2_expected_prev);
		$display ("     Real value = %b", o2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o2_exp[0] = o2_expected_prev[0];
	end
	if (
		( o2_expected_prev[1] !== 1'bx ) && ( o2_prev[1] !== o2_expected_prev[1] )
		&& ((o2_expected_prev[1] !== last_o2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o2_expected_prev);
		$display ("     Real value = %b", o2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o2_exp[1] = o2_expected_prev[1];
	end
	if (
		( o2_expected_prev[2] !== 1'bx ) && ( o2_prev[2] !== o2_expected_prev[2] )
		&& ((o2_expected_prev[2] !== last_o2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o2_expected_prev);
		$display ("     Real value = %b", o2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o2_exp[2] = o2_expected_prev[2];
	end
	if (
		( o2_expected_prev[3] !== 1'bx ) && ( o2_prev[3] !== o2_expected_prev[3] )
		&& ((o2_expected_prev[3] !== last_o2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o2_expected_prev);
		$display ("     Real value = %b", o2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o2_exp[3] = o2_expected_prev[3];
	end
	if (
		( o2_expected_prev[4] !== 1'bx ) && ( o2_prev[4] !== o2_expected_prev[4] )
		&& ((o2_expected_prev[4] !== last_o2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o2_expected_prev);
		$display ("     Real value = %b", o2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o2_exp[4] = o2_expected_prev[4];
	end
	if (
		( o2_expected_prev[5] !== 1'bx ) && ( o2_prev[5] !== o2_expected_prev[5] )
		&& ((o2_expected_prev[5] !== last_o2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o2_expected_prev);
		$display ("     Real value = %b", o2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o2_exp[5] = o2_expected_prev[5];
	end
	if (
		( o2_expected_prev[6] !== 1'bx ) && ( o2_prev[6] !== o2_expected_prev[6] )
		&& ((o2_expected_prev[6] !== last_o2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o2_expected_prev);
		$display ("     Real value = %b", o2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o2_exp[6] = o2_expected_prev[6];
	end
	if (
		( o2_expected_prev[7] !== 1'bx ) && ( o2_prev[7] !== o2_expected_prev[7] )
		&& ((o2_expected_prev[7] !== last_o2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o2_expected_prev);
		$display ("     Real value = %b", o2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o2_exp[7] = o2_expected_prev[7];
	end
	if (
		( o3_expected_prev[0] !== 1'bx ) && ( o3_prev[0] !== o3_expected_prev[0] )
		&& ((o3_expected_prev[0] !== last_o3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o3_expected_prev);
		$display ("     Real value = %b", o3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o3_exp[0] = o3_expected_prev[0];
	end
	if (
		( o3_expected_prev[1] !== 1'bx ) && ( o3_prev[1] !== o3_expected_prev[1] )
		&& ((o3_expected_prev[1] !== last_o3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o3_expected_prev);
		$display ("     Real value = %b", o3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o3_exp[1] = o3_expected_prev[1];
	end
	if (
		( o3_expected_prev[2] !== 1'bx ) && ( o3_prev[2] !== o3_expected_prev[2] )
		&& ((o3_expected_prev[2] !== last_o3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o3_expected_prev);
		$display ("     Real value = %b", o3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o3_exp[2] = o3_expected_prev[2];
	end
	if (
		( o3_expected_prev[3] !== 1'bx ) && ( o3_prev[3] !== o3_expected_prev[3] )
		&& ((o3_expected_prev[3] !== last_o3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o3_expected_prev);
		$display ("     Real value = %b", o3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o3_exp[3] = o3_expected_prev[3];
	end
	if (
		( o3_expected_prev[4] !== 1'bx ) && ( o3_prev[4] !== o3_expected_prev[4] )
		&& ((o3_expected_prev[4] !== last_o3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o3_expected_prev);
		$display ("     Real value = %b", o3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o3_exp[4] = o3_expected_prev[4];
	end
	if (
		( o3_expected_prev[5] !== 1'bx ) && ( o3_prev[5] !== o3_expected_prev[5] )
		&& ((o3_expected_prev[5] !== last_o3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o3_expected_prev);
		$display ("     Real value = %b", o3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o3_exp[5] = o3_expected_prev[5];
	end
	if (
		( o3_expected_prev[6] !== 1'bx ) && ( o3_prev[6] !== o3_expected_prev[6] )
		&& ((o3_expected_prev[6] !== last_o3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o3_expected_prev);
		$display ("     Real value = %b", o3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o3_exp[6] = o3_expected_prev[6];
	end
	if (
		( o3_expected_prev[7] !== 1'bx ) && ( o3_prev[7] !== o3_expected_prev[7] )
		&& ((o3_expected_prev[7] !== last_o3_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o3_expected_prev);
		$display ("     Real value = %b", o3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o3_exp[7] = o3_expected_prev[7];
	end
	if (
		( o4_expected_prev[0] !== 1'bx ) && ( o4_prev[0] !== o4_expected_prev[0] )
		&& ((o4_expected_prev[0] !== last_o4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o4_expected_prev);
		$display ("     Real value = %b", o4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o4_exp[0] = o4_expected_prev[0];
	end
	if (
		( o4_expected_prev[1] !== 1'bx ) && ( o4_prev[1] !== o4_expected_prev[1] )
		&& ((o4_expected_prev[1] !== last_o4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o4_expected_prev);
		$display ("     Real value = %b", o4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o4_exp[1] = o4_expected_prev[1];
	end
	if (
		( o4_expected_prev[2] !== 1'bx ) && ( o4_prev[2] !== o4_expected_prev[2] )
		&& ((o4_expected_prev[2] !== last_o4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o4_expected_prev);
		$display ("     Real value = %b", o4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o4_exp[2] = o4_expected_prev[2];
	end
	if (
		( o4_expected_prev[3] !== 1'bx ) && ( o4_prev[3] !== o4_expected_prev[3] )
		&& ((o4_expected_prev[3] !== last_o4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o4_expected_prev);
		$display ("     Real value = %b", o4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o4_exp[3] = o4_expected_prev[3];
	end
	if (
		( o4_expected_prev[4] !== 1'bx ) && ( o4_prev[4] !== o4_expected_prev[4] )
		&& ((o4_expected_prev[4] !== last_o4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o4_expected_prev);
		$display ("     Real value = %b", o4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o4_exp[4] = o4_expected_prev[4];
	end
	if (
		( o4_expected_prev[5] !== 1'bx ) && ( o4_prev[5] !== o4_expected_prev[5] )
		&& ((o4_expected_prev[5] !== last_o4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o4_expected_prev);
		$display ("     Real value = %b", o4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o4_exp[5] = o4_expected_prev[5];
	end
	if (
		( o4_expected_prev[6] !== 1'bx ) && ( o4_prev[6] !== o4_expected_prev[6] )
		&& ((o4_expected_prev[6] !== last_o4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o4_expected_prev);
		$display ("     Real value = %b", o4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o4_exp[6] = o4_expected_prev[6];
	end
	if (
		( o4_expected_prev[7] !== 1'bx ) && ( o4_prev[7] !== o4_expected_prev[7] )
		&& ((o4_expected_prev[7] !== last_o4_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o4_expected_prev);
		$display ("     Real value = %b", o4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o4_exp[7] = o4_expected_prev[7];
	end
	if (
		( out_expected_prev[0] !== 1'bx ) && ( out_prev[0] !== out_expected_prev[0] )
		&& ((out_expected_prev[0] !== last_out_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_exp[0] = out_expected_prev[0];
	end
	if (
		( out_expected_prev[1] !== 1'bx ) && ( out_prev[1] !== out_expected_prev[1] )
		&& ((out_expected_prev[1] !== last_out_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_exp[1] = out_expected_prev[1];
	end
	if (
		( out_expected_prev[2] !== 1'bx ) && ( out_prev[2] !== out_expected_prev[2] )
		&& ((out_expected_prev[2] !== last_out_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_exp[2] = out_expected_prev[2];
	end
	if (
		( out_expected_prev[3] !== 1'bx ) && ( out_prev[3] !== out_expected_prev[3] )
		&& ((out_expected_prev[3] !== last_out_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_exp[3] = out_expected_prev[3];
	end
	if (
		( out_expected_prev[4] !== 1'bx ) && ( out_prev[4] !== out_expected_prev[4] )
		&& ((out_expected_prev[4] !== last_out_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_exp[4] = out_expected_prev[4];
	end
	if (
		( out_expected_prev[5] !== 1'bx ) && ( out_prev[5] !== out_expected_prev[5] )
		&& ((out_expected_prev[5] !== last_out_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_exp[5] = out_expected_prev[5];
	end
	if (
		( out_expected_prev[6] !== 1'bx ) && ( out_prev[6] !== out_expected_prev[6] )
		&& ((out_expected_prev[6] !== last_out_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_exp[6] = out_expected_prev[6];
	end
	if (
		( out_expected_prev[7] !== 1'bx ) && ( out_prev[7] !== out_expected_prev[7] )
		&& ((out_expected_prev[7] !== last_out_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_exp[7] = out_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sort3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg in_d;
reg [7:0] num1;
reg [7:0] num2;
reg [7:0] num3;
reg [7:0] num4;
reg reset;
// wires                                               
wire [7:0] o1;
wire [7:0] o2;
wire [7:0] o3;
wire [7:0] o4;
wire [7:0] out;

wire sampler;                             

// assign statements (if any)                          
sort3 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.in_d(in_d),
	.num1(num1),
	.num2(num2),
	.num3(num3),
	.num4(num4),
	.o1(o1),
	.o2(o2),
	.o3(o3),
	.o4(o4),
	.out(out),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #10000 1'b0;
	reset = #30000 1'b1;
end 

// in_d
initial
begin
	in_d = 1'b1;
	in_d = #120000 1'b0;
	in_d = #150000 1'b1;
end 
// num1[ 7 ]
initial
begin
	num1[7] = 1'b0;
end 
// num1[ 6 ]
initial
begin
	num1[6] = 1'b1;
end 
// num1[ 5 ]
initial
begin
	num1[5] = 1'b0;
end 
// num1[ 4 ]
initial
begin
	num1[4] = 1'b0;
end 
// num1[ 3 ]
initial
begin
	num1[3] = 1'b0;
end 
// num1[ 2 ]
initial
begin
	num1[2] = 1'b0;
end 
// num1[ 1 ]
initial
begin
	num1[1] = 1'b0;
end 
// num1[ 0 ]
initial
begin
	num1[0] = 1'b0;
end 
// num2[ 7 ]
initial
begin
	num2[7] = 1'b0;
end 
// num2[ 6 ]
initial
begin
	num2[6] = 1'b0;
end 
// num2[ 5 ]
initial
begin
	num2[5] = 1'b0;
end 
// num2[ 4 ]
initial
begin
	num2[4] = 1'b0;
end 
// num2[ 3 ]
initial
begin
	num2[3] = 1'b1;
end 
// num2[ 2 ]
initial
begin
	num2[2] = 1'b0;
end 
// num2[ 1 ]
initial
begin
	num2[1] = 1'b1;
end 
// num2[ 0 ]
initial
begin
	num2[0] = 1'b1;
end 
// num3[ 7 ]
initial
begin
	num3[7] = 1'b1;
end 
// num3[ 6 ]
initial
begin
	num3[6] = 1'b1;
end 
// num3[ 5 ]
initial
begin
	num3[5] = 1'b1;
end 
// num3[ 4 ]
initial
begin
	num3[4] = 1'b0;
end 
// num3[ 3 ]
initial
begin
	num3[3] = 1'b0;
end 
// num3[ 2 ]
initial
begin
	num3[2] = 1'b1;
end 
// num3[ 1 ]
initial
begin
	num3[1] = 1'b1;
end 
// num3[ 0 ]
initial
begin
	num3[0] = 1'b0;
end 
// num4[ 7 ]
initial
begin
	num4[7] = 1'b0;
end 
// num4[ 6 ]
initial
begin
	num4[6] = 1'b1;
end 
// num4[ 5 ]
initial
begin
	num4[5] = 1'b0;
end 
// num4[ 4 ]
initial
begin
	num4[4] = 1'b0;
end 
// num4[ 3 ]
initial
begin
	num4[3] = 1'b0;
end 
// num4[ 2 ]
initial
begin
	num4[2] = 1'b0;
end 
// num4[ 1 ]
initial
begin
	num4[1] = 1'b1;
end 
// num4[ 0 ]
initial
begin
	num4[0] = 1'b0;
end 

sort3_vlg_sample_tst tb_sample (
	.clk(clk),
	.in_d(in_d),
	.num1(num1),
	.num2(num2),
	.num3(num3),
	.num4(num4),
	.reset(reset),
	.sampler_tx(sampler)
);

sort3_vlg_check_tst tb_out(
	.o1(o1),
	.o2(o2),
	.o3(o3),
	.o4(o4),
	.out(out),
	.sampler_rx(sampler)
);
endmodule

