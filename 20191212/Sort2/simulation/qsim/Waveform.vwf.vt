// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/16/2019 23:29:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Sort2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Sort2_vlg_sample_tst(
	clk,
	in_data,
	isData,
	reset,
	sampler_tx
);
input  clk;
input [7:0] in_data;
input  isData;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or in_data or isData or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Sort2_vlg_check_tst (
	out0,
	out1,
	out2,
	out3,
	sampler_rx
);
input [7:0] out0;
input [7:0] out1;
input [7:0] out2;
input [7:0] out3;
input sampler_rx;

reg [7:0] out0_expected;
reg [7:0] out1_expected;
reg [7:0] out2_expected;
reg [7:0] out3_expected;

reg [7:0] out0_prev;
reg [7:0] out1_prev;
reg [7:0] out2_prev;
reg [7:0] out3_prev;

reg [7:0] out0_expected_prev;
reg [7:0] out1_expected_prev;
reg [7:0] out2_expected_prev;
reg [7:0] out3_expected_prev;

reg [7:0] last_out0_exp;
reg [7:0] last_out1_exp;
reg [7:0] last_out2_exp;
reg [7:0] last_out3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	out0_prev = out0;
	out1_prev = out1;
	out2_prev = out2;
	out3_prev = out3;
end

// update expected /o prevs

always @(trigger)
begin
	out0_expected_prev = out0_expected;
	out1_expected_prev = out1_expected;
	out2_expected_prev = out2_expected;
	out3_expected_prev = out3_expected;
end


// expected out0[ 7 ]
initial
begin
	out0_expected[7] = 1'bX;
end 
// expected out0[ 6 ]
initial
begin
	out0_expected[6] = 1'bX;
end 
// expected out0[ 5 ]
initial
begin
	out0_expected[5] = 1'bX;
end 
// expected out0[ 4 ]
initial
begin
	out0_expected[4] = 1'bX;
end 
// expected out0[ 3 ]
initial
begin
	out0_expected[3] = 1'bX;
end 
// expected out0[ 2 ]
initial
begin
	out0_expected[2] = 1'bX;
end 
// expected out0[ 1 ]
initial
begin
	out0_expected[1] = 1'bX;
end 
// expected out0[ 0 ]
initial
begin
	out0_expected[0] = 1'bX;
end 
// expected out1[ 7 ]
initial
begin
	out1_expected[7] = 1'bX;
end 
// expected out1[ 6 ]
initial
begin
	out1_expected[6] = 1'bX;
end 
// expected out1[ 5 ]
initial
begin
	out1_expected[5] = 1'bX;
end 
// expected out1[ 4 ]
initial
begin
	out1_expected[4] = 1'bX;
end 
// expected out1[ 3 ]
initial
begin
	out1_expected[3] = 1'bX;
end 
// expected out1[ 2 ]
initial
begin
	out1_expected[2] = 1'bX;
end 
// expected out1[ 1 ]
initial
begin
	out1_expected[1] = 1'bX;
end 
// expected out1[ 0 ]
initial
begin
	out1_expected[0] = 1'bX;
end 
// expected out2[ 7 ]
initial
begin
	out2_expected[7] = 1'bX;
end 
// expected out2[ 6 ]
initial
begin
	out2_expected[6] = 1'bX;
end 
// expected out2[ 5 ]
initial
begin
	out2_expected[5] = 1'bX;
end 
// expected out2[ 4 ]
initial
begin
	out2_expected[4] = 1'bX;
end 
// expected out2[ 3 ]
initial
begin
	out2_expected[3] = 1'bX;
end 
// expected out2[ 2 ]
initial
begin
	out2_expected[2] = 1'bX;
end 
// expected out2[ 1 ]
initial
begin
	out2_expected[1] = 1'bX;
end 
// expected out2[ 0 ]
initial
begin
	out2_expected[0] = 1'bX;
end 
// expected out3[ 7 ]
initial
begin
	out3_expected[7] = 1'bX;
end 
// expected out3[ 6 ]
initial
begin
	out3_expected[6] = 1'bX;
end 
// expected out3[ 5 ]
initial
begin
	out3_expected[5] = 1'bX;
end 
// expected out3[ 4 ]
initial
begin
	out3_expected[4] = 1'bX;
end 
// expected out3[ 3 ]
initial
begin
	out3_expected[3] = 1'bX;
end 
// expected out3[ 2 ]
initial
begin
	out3_expected[2] = 1'bX;
end 
// expected out3[ 1 ]
initial
begin
	out3_expected[1] = 1'bX;
end 
// expected out3[ 0 ]
initial
begin
	out3_expected[0] = 1'bX;
end 
// generate trigger
always @(out0_expected or out0 or out1_expected or out1 or out2_expected or out2 or out3_expected or out3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out0 = %b | expected out1 = %b | expected out2 = %b | expected out3 = %b | ",out0_expected_prev,out1_expected_prev,out2_expected_prev,out3_expected_prev);
	$display("| real out0 = %b | real out1 = %b | real out2 = %b | real out3 = %b | ",out0_prev,out1_prev,out2_prev,out3_prev);
`endif
	if (
		( out0_expected_prev[0] !== 1'bx ) && ( out0_prev[0] !== out0_expected_prev[0] )
		&& ((out0_expected_prev[0] !== last_out0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[0] = out0_expected_prev[0];
	end
	if (
		( out0_expected_prev[1] !== 1'bx ) && ( out0_prev[1] !== out0_expected_prev[1] )
		&& ((out0_expected_prev[1] !== last_out0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[1] = out0_expected_prev[1];
	end
	if (
		( out0_expected_prev[2] !== 1'bx ) && ( out0_prev[2] !== out0_expected_prev[2] )
		&& ((out0_expected_prev[2] !== last_out0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[2] = out0_expected_prev[2];
	end
	if (
		( out0_expected_prev[3] !== 1'bx ) && ( out0_prev[3] !== out0_expected_prev[3] )
		&& ((out0_expected_prev[3] !== last_out0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[3] = out0_expected_prev[3];
	end
	if (
		( out0_expected_prev[4] !== 1'bx ) && ( out0_prev[4] !== out0_expected_prev[4] )
		&& ((out0_expected_prev[4] !== last_out0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[4] = out0_expected_prev[4];
	end
	if (
		( out0_expected_prev[5] !== 1'bx ) && ( out0_prev[5] !== out0_expected_prev[5] )
		&& ((out0_expected_prev[5] !== last_out0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[5] = out0_expected_prev[5];
	end
	if (
		( out0_expected_prev[6] !== 1'bx ) && ( out0_prev[6] !== out0_expected_prev[6] )
		&& ((out0_expected_prev[6] !== last_out0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[6] = out0_expected_prev[6];
	end
	if (
		( out0_expected_prev[7] !== 1'bx ) && ( out0_prev[7] !== out0_expected_prev[7] )
		&& ((out0_expected_prev[7] !== last_out0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[7] = out0_expected_prev[7];
	end
	if (
		( out1_expected_prev[0] !== 1'bx ) && ( out1_prev[0] !== out1_expected_prev[0] )
		&& ((out1_expected_prev[0] !== last_out1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[0] = out1_expected_prev[0];
	end
	if (
		( out1_expected_prev[1] !== 1'bx ) && ( out1_prev[1] !== out1_expected_prev[1] )
		&& ((out1_expected_prev[1] !== last_out1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[1] = out1_expected_prev[1];
	end
	if (
		( out1_expected_prev[2] !== 1'bx ) && ( out1_prev[2] !== out1_expected_prev[2] )
		&& ((out1_expected_prev[2] !== last_out1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[2] = out1_expected_prev[2];
	end
	if (
		( out1_expected_prev[3] !== 1'bx ) && ( out1_prev[3] !== out1_expected_prev[3] )
		&& ((out1_expected_prev[3] !== last_out1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[3] = out1_expected_prev[3];
	end
	if (
		( out1_expected_prev[4] !== 1'bx ) && ( out1_prev[4] !== out1_expected_prev[4] )
		&& ((out1_expected_prev[4] !== last_out1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[4] = out1_expected_prev[4];
	end
	if (
		( out1_expected_prev[5] !== 1'bx ) && ( out1_prev[5] !== out1_expected_prev[5] )
		&& ((out1_expected_prev[5] !== last_out1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[5] = out1_expected_prev[5];
	end
	if (
		( out1_expected_prev[6] !== 1'bx ) && ( out1_prev[6] !== out1_expected_prev[6] )
		&& ((out1_expected_prev[6] !== last_out1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[6] = out1_expected_prev[6];
	end
	if (
		( out1_expected_prev[7] !== 1'bx ) && ( out1_prev[7] !== out1_expected_prev[7] )
		&& ((out1_expected_prev[7] !== last_out1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[7] = out1_expected_prev[7];
	end
	if (
		( out2_expected_prev[0] !== 1'bx ) && ( out2_prev[0] !== out2_expected_prev[0] )
		&& ((out2_expected_prev[0] !== last_out2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[0] = out2_expected_prev[0];
	end
	if (
		( out2_expected_prev[1] !== 1'bx ) && ( out2_prev[1] !== out2_expected_prev[1] )
		&& ((out2_expected_prev[1] !== last_out2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[1] = out2_expected_prev[1];
	end
	if (
		( out2_expected_prev[2] !== 1'bx ) && ( out2_prev[2] !== out2_expected_prev[2] )
		&& ((out2_expected_prev[2] !== last_out2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[2] = out2_expected_prev[2];
	end
	if (
		( out2_expected_prev[3] !== 1'bx ) && ( out2_prev[3] !== out2_expected_prev[3] )
		&& ((out2_expected_prev[3] !== last_out2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[3] = out2_expected_prev[3];
	end
	if (
		( out2_expected_prev[4] !== 1'bx ) && ( out2_prev[4] !== out2_expected_prev[4] )
		&& ((out2_expected_prev[4] !== last_out2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[4] = out2_expected_prev[4];
	end
	if (
		( out2_expected_prev[5] !== 1'bx ) && ( out2_prev[5] !== out2_expected_prev[5] )
		&& ((out2_expected_prev[5] !== last_out2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[5] = out2_expected_prev[5];
	end
	if (
		( out2_expected_prev[6] !== 1'bx ) && ( out2_prev[6] !== out2_expected_prev[6] )
		&& ((out2_expected_prev[6] !== last_out2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[6] = out2_expected_prev[6];
	end
	if (
		( out2_expected_prev[7] !== 1'bx ) && ( out2_prev[7] !== out2_expected_prev[7] )
		&& ((out2_expected_prev[7] !== last_out2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[7] = out2_expected_prev[7];
	end
	if (
		( out3_expected_prev[0] !== 1'bx ) && ( out3_prev[0] !== out3_expected_prev[0] )
		&& ((out3_expected_prev[0] !== last_out3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[0] = out3_expected_prev[0];
	end
	if (
		( out3_expected_prev[1] !== 1'bx ) && ( out3_prev[1] !== out3_expected_prev[1] )
		&& ((out3_expected_prev[1] !== last_out3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[1] = out3_expected_prev[1];
	end
	if (
		( out3_expected_prev[2] !== 1'bx ) && ( out3_prev[2] !== out3_expected_prev[2] )
		&& ((out3_expected_prev[2] !== last_out3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[2] = out3_expected_prev[2];
	end
	if (
		( out3_expected_prev[3] !== 1'bx ) && ( out3_prev[3] !== out3_expected_prev[3] )
		&& ((out3_expected_prev[3] !== last_out3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[3] = out3_expected_prev[3];
	end
	if (
		( out3_expected_prev[4] !== 1'bx ) && ( out3_prev[4] !== out3_expected_prev[4] )
		&& ((out3_expected_prev[4] !== last_out3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[4] = out3_expected_prev[4];
	end
	if (
		( out3_expected_prev[5] !== 1'bx ) && ( out3_prev[5] !== out3_expected_prev[5] )
		&& ((out3_expected_prev[5] !== last_out3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[5] = out3_expected_prev[5];
	end
	if (
		( out3_expected_prev[6] !== 1'bx ) && ( out3_prev[6] !== out3_expected_prev[6] )
		&& ((out3_expected_prev[6] !== last_out3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[6] = out3_expected_prev[6];
	end
	if (
		( out3_expected_prev[7] !== 1'bx ) && ( out3_prev[7] !== out3_expected_prev[7] )
		&& ((out3_expected_prev[7] !== last_out3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[7] = out3_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Sort2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] in_data;
reg isData;
reg reset;
// wires                                               
wire [7:0] out0;
wire [7:0] out1;
wire [7:0] out2;
wire [7:0] out3;

wire sampler;                             

// assign statements (if any)                          
Sort2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.in_data(in_data),
	.isData(isData),
	.out0(out0),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// in_data[ 7 ]
initial
begin
	in_data[7] = 1'b0;
	in_data[7] = #120000 1'b1;
	in_data[7] = #20000 1'b0;
end 
// in_data[ 6 ]
initial
begin
	in_data[6] = 1'b0;
	in_data[6] = #80000 1'b1;
	in_data[6] = #20000 1'b0;
	in_data[6] = #20000 1'b1;
	in_data[6] = #40000 1'b0;
end 
// in_data[ 5 ]
initial
begin
	in_data[5] = 1'b0;
	in_data[5] = #120000 1'b1;
	in_data[5] = #20000 1'b0;
end 
// in_data[ 4 ]
initial
begin
	in_data[4] = 1'b0;
end 
// in_data[ 3 ]
initial
begin
	in_data[3] = 1'b0;
	in_data[3] = #100000 1'b1;
	in_data[3] = #20000 1'b0;
end 
// in_data[ 2 ]
initial
begin
	in_data[2] = 1'b0;
	in_data[2] = #120000 1'b1;
	in_data[2] = #40000 1'b0;
end 
// in_data[ 1 ]
initial
begin
	in_data[1] = 1'b0;
	in_data[1] = #100000 1'b1;
	in_data[1] = #40000 1'b0;
end 
// in_data[ 0 ]
initial
begin
	in_data[0] = 1'b0;
	in_data[0] = #100000 1'b1;
	in_data[0] = #20000 1'b0;
	in_data[0] = #20000 1'b1;
	in_data[0] = #20000 1'b0;
end 

// isData
initial
begin
	isData = 1'b0;
	isData = #70000 1'b1;
	isData = #310000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #10000 1'b0;
	reset = #40000 1'b1;
end 

Sort2_vlg_sample_tst tb_sample (
	.clk(clk),
	.in_data(in_data),
	.isData(isData),
	.reset(reset),
	.sampler_tx(sampler)
);

Sort2_vlg_check_tst tb_out(
	.out0(out0),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.sampler_rx(sampler)
);
endmodule

